<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment/>
    <!-- 相应驱动的jdbcUrl-->
    <!--<entry key="BoneCP.jdbcUrl">jdbc:mysql://localhost:3306/joinbus?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useLocalSessionState=true</entry>
    &lt;!&ndash; 数据库的用户名 &ndash;&gt;
    <entry key="BoneCP.username">dev</entry>
    &lt;!&ndash; 数据库的密码 &ndash;&gt;
    <entry key="BoneCP.password">dev</entry>
    &lt;!&ndash; 相应驱动类&ndash;&gt;
    <entry key="BoneCP.driverClass">com.mysql.jdbc.Driver</entry>
    &lt;!&ndash; 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 &ndash;&gt;
    <entry key="BoneCP.idleConnectionTestPeriod" >240</entry>
    &lt;!&ndash; 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 &ndash;&gt;
    <entry key="BoneCP.idleMaxAge">60</entry>
    &lt;!&ndash; 每个分区最大的连接数 &ndash;&gt;
    <entry key="BoneCP.maxConnectionsPerPartition">40</entry>
    &lt;!&ndash; 每个分区最小的连接数 &ndash;&gt;
    <entry key="BoneCP.minConnectionsPerPartition">20</entry>
    &lt;!&ndash; 分区数 ，默认值2，最小1，推荐3-4，视应用而定&ndash;&gt;
    <entry key="BoneCP.partitionCount" >4</entry>
    &lt;!&ndash; 每次去拿数据库连接的时候一次性要拿几个,默认值：2 &ndash;&gt;
    <entry key="BoneCP.acquireIncrement">2</entry>
    &lt;!&ndash; 缓存prepared statements的大小，默认值：0 &ndash;&gt;
    <entry key="BoneCP.statementsCacheSize">0</entry>
    &lt;!&ndash; 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 &ndash;&gt;
    <entry key="BoneCP.releaseHelperThreads">3</entry>
    &lt;!&ndash; 数据库在获取连接时使用的验证sql &ndash;&gt;
    <entry key="BoneCP.initSQL">select 1</entry>
    &lt;!&ndash;在做keep-alive的时候的SQL语句&ndash;&gt;
    <entry key="BoneCP.connectionTestStatement"></entry>
    &lt;!&ndash;如果设置为true，则会增加一个线程监控关闭连接时的情况，如果关闭时出现异常，则打出错误日志，主要用于debug。上线后记得关掉&ndash;&gt;
    <entry key="BoneCP.closeConnectionWatch">false</entry>
    &lt;!&ndash;如果设置为true，就会打印执行的SQL语句，如果你用了其他能打印SQL语句的框架，那就不必了&ndash;&gt;
    <entry key="BoneCP.logStatementsEnabled">true</entry>
    &lt;!&ndash;在获取连接失败后，第二次参试前的延迟时间，默认为7000毫秒。&ndash;&gt;
    <entry key="BoneCP.acquireRetryDelay">7000</entry>
    &lt;!&ndash;在获取连接失败后的重试次数，默认为5次&ndash;&gt;
    <entry key="BoneCP.acquireRetryAttempts">false</entry>
    &lt;!&ndash;如果设置为true，那么连接池不会自动创建最小连接数的链接，而是保持为空，直到有需求要获取连接&ndash;&gt;
    <entry key="BoneCP.lazyInit">false</entry>
    &lt;!&ndash;如果设置为true，则会保存该链接上的所有活动，以备下次重试的时候使用，这里指的活动是数据库操作&ndash;&gt;
    <entry key="BoneCP.transactionRecoveryEnabled">false</entry>-->
    <!--Connection hook class name-->
    <!--<entry key="BoneCP.connectionHookClassName">false</entry>-->
    <!--自定义连接池名称-->
    <!--<entry key="BoneCP.poolName">hoss</entry>-->
    <!--获取连接的时候最大的等待时间，默认值为：Long.MAX_VALUE-->
    <!--<entry key="BoneCP.connectionTimeout">false</entry>-->
    <!--控制JMX的支持开关-->
    <!--<entry key="BoneCP.disableJMX">false</entry>-->


   <!-- driverClassName = oracle.jdbc.driver.OracleDriver
    url = jdbc:oracle:thin:@127.0.0.1:1521:ORCL
    username = ******
    password = ******
    initialSize = 5
    maxActive = 10
    minIdle = 3
    maxWait = 60000
    removeAbandoned = true
    removeAbandonedTimeout = 180
    timeBetweenEvictionRunsMillis = 60000
    minEvictableIdleTimeMillis = 300000
    validationQuery = SELECT 1 FROM DUAL
    testWhileIdle = true
    testOnBorrow = false
    testOnReturn = false
    poolPreparedStatements = true
    maxPoolPreparedStatementPerConnectionSize = 50
    filters = stat-->

    <entry key="druid.jdbcUrl">jdbc:mysql://localhost:3306/joinbus?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useLocalSessionState=true</entry>
    <!-- 数据库的用户名 -->
    <entry key="druid.username">dev</entry>
    <!-- 数据库的密码 -->
    <entry key="druid.password">dev</entry>
    <!-- 相应驱动类-->
    <entry key="druid.driverClass">com.mysql.jdbc.Driver</entry>
    <!-- 初始化连接数量 -->
    <entry key="druid.initialSize" >5</entry>
    <!-- 最大并发连接数 -->
    <entry key="druid.maxActive">10</entry>
    <!-- 最大空闲连接数 -->
    <entry key="druid.maxIdle">20</entry>
    <!-- 最小空闲连接数 -->
    <entry key="druid.minIdle">3</entry>
    <!-- 配置获取连接等待超时的时间,单位是毫秒 -->
    <entry key="druid.maxWait">60000</entry>
    <!-- 超过时间限制是否回收 -->
    <entry key="druid.removeAbandoned">true</entry>
    <!-- 超过时间限制多长；单位是毫秒 -->
    <entry key="druid.removeAbandonedTimeoutMillis">180000</entry>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <entry key="druid.timeBetweenEvictionRunsMillis">60000</entry>
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <entry key="druid.minEvictableIdleTimeMillis">300000</entry>
    <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
    <entry key="druid.validationQuery">select 1</entry>
    <!-- 申请连接的时候检测 -->
    <entry key="druid.testWhileIdle">true</entry>
    <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <entry key="druid.testOnBorrow">false</entry>
    <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
    <entry key="druid.testOnReturn">false</entry>
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <entry key="druid.poolPreparedStatements">true</entry>
    <entry key="druid.maxPoolPreparedStatementPerConnectionSize">50</entry>
    <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
               监控统计用的filter:stat
               日志用的filter:log4j
               防御SQL注入的filter:wall -->
    <entry key="druid.filters">stat</entry>
</properties>
